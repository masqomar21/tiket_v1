// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
//   binaryTargets = ["native", "rhel-openssl-1.0.x"]
// }

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
    BasicUser @map("basic user")
    AdminWisata @map("admin wisata")
    AdminKeuangan @map("admin keuangan")
    SuperAdmin @map("super admin")
}

enum Status {
    Created @map("created")
    Pending @map("pending")
    Settlement @map("settlement")
    Expired @map("expired")
    Done @map("done")
    Canceled @map("canceled")
}

model UsersAccount {
  // id        String  @id @default(dbgenerated("uuid()")) @db.VarChar(36) @map("id")
  id        String  @id @default(uuid()) @db.Uuid @map("id")
  email     String  @unique
  password  String
  role      Role @default(BasicUser)
  // VerifiedEmail Int @db.TinyInt() @default(0) @map("verified_email")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deleted   Int @db.SmallInt @default(0) @map("deleted")
  userData  UserData?
  userAccess  UserAccess[]
  loginDevice LoginDevice[]
  otp        Otp[]

  @@map("users_account")
}

model UserData {
  id      Int @id @default(autoincrement()) @map("id")
  username  String? @map("user_name")
  profile String? @map("profile")
  userAccountId String @db.Uuid @unique @map("user_account_id")
  userAcount  UsersAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_data")
}

model UserAccess {
  id      Int @id @default(autoincrement()) @map("id")
  accessToken  String @map("access_token")
  rememberMe  Int @db.SmallInt() @default(0) @map("remember_me")
  userAccountId String @db.Uuid @unique @map("user_account_id")
  userAcount  UsersAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade) 

  @@map("user_access")
}

model LoginDevice {
  id            Int          @id @default(autoincrement()) @map("id")
  deviceName    String       @map("device_name")
  userAccountId String       @db.Uuid @map("user_account_id")
  userAcount    UsersAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@map("login_device")
}

model Otp{
  id            Int          @id @default(autoincrement()) @map("id")
  otp           String?
  userAccountId String       @db.Uuid @map("user_account_id")
  userAcount    UsersAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
  


